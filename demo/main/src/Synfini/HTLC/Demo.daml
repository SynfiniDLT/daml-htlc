-- Copyright (c) 2023 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.HTLC.Demo where

import qualified DA.Map as Map
import qualified DA.Optional as O
import qualified DA.Set as Set
import qualified DA.Time as T
import qualified DA.Text as TX
import qualified Daml.Finance.Account.Account as Account
import qualified Daml.Finance.Interface.Account.Account as Account
import qualified Daml.Finance.Interface.Account.Factory as AccountFactory
import qualified Daml.Finance.Interface.Holding.Base as Holding
import qualified Daml.Finance.Interface.Holding.Transferable as Transferable 
import Daml.Finance.Interface.Types.Common.Types
import qualified Daml.Finance.Interface.Util.Disclosure as Disclosure
import qualified Daml.Finance.Holding.Fungible as Fungible
import qualified Daml.Finance.Holding.NonFungible as NonFungible
import Daml.Script
import Synfini.HTLC

setupParty : Text -> Script Party
setupParty name = do
  party <- allocatePartyWithHint name (PartyIdHint name)
  userId <- validateUserId name
  createUser (User userId (Some party)) [CanActAs party]
  pure party

-- Creates some account and holdings so we can try putting them into a HTLC using the navigator
init : Script ()
init = do
  alice <- setupParty "alice"
  bob <- setupParty "bob"
  depository <- setupParty "depository"
  issuer <- setupParty "issuer"
  custodian <- setupParty "custodian"
  let allParties = Set.fromList [alice, bob, depository, issuer, custodian]
      aliceFungibleAccount = AccountKey with
        custodian
        owner = alice
        id = Id "stablecoin:alice@custodian"
      bobFungibleAccount = AccountKey with
        custodian
        owner = bob
        id = Id "stablecoin:bob@custodian"
      aliceNonFungibleAccount = AccountKey with
        custodian
        owner = alice
        id = Id "nft:alice@custodian"
      bobNonFungibleAccount = AccountKey with
        custodian
        owner = bob
        id = Id "nft:bob@custodian"
  fungibleHoldingFactoryCid <- submit issuer $
    createCmd Fungible.Factory with
      provider = issuer
      observers = Map.fromList [("HTLC", allParties)]
  nonFungibleHoldingFactoryCid <- submit issuer $
    createCmd NonFungible.Factory with
      provider = issuer
      observers = Map.fromList [("HTLC", allParties)]
  accountFactoryCid <- submit depository $
    createCmd Account.Factory with
      provider = depository
      observers = Map.fromList [("HTLC", allParties)]
  aliceFungibleAccountCid <- submitMulti [alice, custodian] [] $
    exerciseCmd @AccountFactory.F (toInterfaceContractId accountFactoryCid) AccountFactory.Create with
      account = aliceFungibleAccount
      holdingFactoryCid = toInterfaceContractId fungibleHoldingFactoryCid
      controllers = Account.Controllers with
        outgoing = Set.empty
        incoming = Set.empty
      description = "Alice's stablecoin account"
      observers = Map.fromList [("HTLC", allParties)]
  submitMulti [bob, custodian] [] $
    exerciseCmd @AccountFactory.F (toInterfaceContractId accountFactoryCid) AccountFactory.Create with
      account = bobFungibleAccount
      holdingFactoryCid = toInterfaceContractId fungibleHoldingFactoryCid
      controllers = Account.Controllers with
        outgoing = Set.empty
        incoming = Set.empty
      description = "Bob's stablecoin account"
      observers = Map.fromList [("HTLC", allParties)]
  submitMulti [alice, custodian] [] $
    exerciseCmd @AccountFactory.F (toInterfaceContractId accountFactoryCid) AccountFactory.Create with
      account = aliceNonFungibleAccount
      holdingFactoryCid = toInterfaceContractId nonFungibleHoldingFactoryCid
      controllers = Account.Controllers with
        outgoing = Set.empty
        incoming = Set.empty
      description = "Alice's nft account"
      observers = Map.fromList [("HTLC", allParties)]
  bobNonFungibleAccountCid <- submitMulti [bob, custodian] [] $
    exerciseCmd @AccountFactory.F (toInterfaceContractId accountFactoryCid) AccountFactory.Create with
      account = bobNonFungibleAccount
      holdingFactoryCid = toInterfaceContractId nonFungibleHoldingFactoryCid
      controllers = Account.Controllers with
        outgoing = Set.empty
        incoming = Set.empty
      description = "Bob's nft account"
      observers = Map.fromList [("HTLC", allParties)]
  fungibleHoldingCid <- submit custodian $
    exerciseCmd aliceFungibleAccountCid Account.Credit with
      quantity = Quantity with
        unit = InstrumentKey with
          depository
          issuer
          id = Id "Stable AUD"
          version = "0"
        amount = 1.0
  submit alice $
    exerciseCmd @Disclosure.I (toInterfaceContractId fungibleHoldingCid) Disclosure.AddObservers with
      disclosers = Set.fromList [alice]
      observersToAdd = ("HTLC", allParties)
  nonFungibleHoldingCid <- submit custodian $
    exerciseCmd bobNonFungibleAccountCid Account.Credit with
      quantity = Quantity with
        unit = InstrumentKey with
          depository
          issuer
          id = Id "0xABCDEF..."
          version = "0"
        amount = 1.0
  submit bob $
    exerciseCmd @Disclosure.I (toInterfaceContractId nonFungibleHoldingCid) Disclosure.AddObservers with
      disclosers = Set.fromList [bob]
      observersToAdd = ("HTLC", allParties)
  pure ()
