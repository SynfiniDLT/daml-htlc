module Synfini.HTLC where

import qualified DA.Set as Set
import DA.Text (sha256)
import qualified Daml.Finance.Interface.Holding.Base as Holding
import qualified Daml.Finance.Interface.Holding.Transferable as Transferable
import Daml.Finance.Interface.Types.Common.Types

template HTLCProposal
  with
    sender : Party
    receiver : Party
    holdingCid : ContractId Transferable.I
    hash : Text
    unlockTime : Time
  where
    signatory sender

    observer receiver

    choice HTLCProposal_Accept : ContractId HTLC
      with
        receiverAccount : AccountKey
      controller receiver
      do
        assertMsg "HTLC: Receiver must be the owner of the receiver account" (receiverAccount.owner == receiver)
        -- Lock the holding to prevent transfers
        holdingCid' : ContractId Holding.I <- exercise (toInterfaceContractId @Holding.I holdingCid) Holding.Acquire with
          newLockers = Set.fromList [sender, receiver]
          context = htlcContext hash
          lockType = Holding.Semaphore
        holdingView <- exercise holdingCid' Holding.GetView with viewer = receiver
        assertMsg "HTLC: Holding owner must be the sender" (holdingView.account.owner == sender)
        create HTLC with
          sender
          receiverAccount
          holdingCid = coerceInterfaceContractId holdingCid'
          hash
          unlockTime

template HTLC
  with
    sender : Party
    receiverAccount : AccountKey
    holdingCid : ContractId Transferable.I
    hash : Text
    unlockTime : Time
  where
    signatory sender, receiverAccount.owner

    choice HTLC_Claim : ContractId Transferable.I
      with
        preImage : Text
      controller receiverAccount.owner
      do
        now <- getTime
        assertMsg "HTLC: Can only claim holding before the unlock time" (now < unlockTime)
        assertMsg "HTLC: Must be correct pre-image" (sha256 preImage == hash)
        unlockedHoldingCid <- exercise (toInterfaceContractId @Holding.I holdingCid) Holding.Release with
          context = htlcContext hash
        exercise (coerceInterfaceContractId @Transferable.I unlockedHoldingCid) Transferable.Transfer with
          actors = Set.fromList [sender, receiverAccount.owner]
          newOwnerAccount = receiverAccount

    choice HTLC_Unlock : ContractId Transferable.I
      controller sender
      do
        now <- getTime
        assertMsg "HTLC: Can only unlock holding on or after the unlock time" (now >= unlockTime)
        coerceInterfaceContractId <$> exercise (toInterfaceContractId @Holding.I holdingCid) Holding.Release with
          context = htlcContext hash

htlcContext : Text -> Text
htlcContext hash = "HTLC: " <> hash
